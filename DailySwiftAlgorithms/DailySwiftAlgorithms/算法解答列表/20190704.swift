//
//  20190704.swift
//  DailySwiftAlgorithms
//
//  Created by Beryter on 2019/7/4.
//  Copyright © 2019 Beryter. All rights reserved.
//

import Foundation

struct Helper_20190704 {
    //MARK: - 实现一个方法，来判断一个正整数是否是2的整数次幂（如16是2的4次方，返回true;18不是2的整数次幂，返回false）。要求性能尽可能高。
    
    /**
     思路： 十进制数转换成二进制后。例如： 8->1000, 16->10000, 32->100000,64->100000,100->1100100。发现规律：如果一个整数是2的整数次幂，当转化为二进制时，只有最高位为1，其他位都为0
     
     然后把这些2的整数次幂都各自减1，在转化成二进制，如下： 8->111, 16->1111,32->11111, 64->111111, 100->1100011。发现规律：2的整数次幂减1的二进制所有的位都是1。
     
     原数值与减1之后的数值，他们的二进制进行按位与运算，也就是n&(n-1)。8->8&7->0, 16->16&15->0, 32->32&31->0, 64->64&63->0,100->100&99->1100000。发现规律：凡是2的整数次幂和它本身减1的结果进行与运算，结果都必定时0。反之，如果一个整数不是2的整数次幂，结果一定不是0。
     */
    
    
    /// 判断一个正整数是否是2的整数次幂
    /// - Parameter val: 整数
    func isPowerOf2(_ val: Int) -> Bool {
        return val&(val-1) == 0
    }
    
}
